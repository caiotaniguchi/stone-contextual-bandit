# Explore-then-Exploit Multi-Armed-Bandit Strategy
import numpy as np


class ExploreThenExploit:
    def __init__(self, bandits):
        self.bandits = bandits
        self.reset()

    def reset(self):
        self.bandits_rewards = [[] for i in range(len(self.bandits))]
        self.avg_estimates = []
        self.experiment_rewards = []
        self.best_bandit = 0

    def run_experiment(self, n_exploration_rounds=10, experiment_length=100, seed=None):
        if n_exploration_rounds > experiment_length:
            raise ValueError('The number of exploration rounds exceeded the experiment length')
        if seed is not None:
            np.random.seed(seed)
        self.reset()

        # Exploration phase
        for i in range(n_exploration_rounds):
            cur_bandit = i % len(self.bandits)
            reward = self.bandits[cur_bandit].sample_reward()
            self.bandits_rewards[cur_bandit].append(reward)
            self.experiment_rewards.append(reward)

        # Picking the best bandit
        for i in range(len(self.bandits)):
            self.avg_estimates.append(np.mean(self.bandits_rewards[i]))
            self.best_bandit = np.argmax(self.avg_estimates)

        # Exploitation phase
        for _ in range(experiment_length - n_exploration_rounds):
            reward = self.bandits[self.best_bandit].sample_reward()
            self.bandits_rewards[self.best_bandit].append(reward)
            self.experiment_rewards.append(reward)
